{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Monkey365","text":"<p>Monkey365 is an Open Source security tool that can be used to easily conduct not only Microsoft 365, but also Azure subscriptions and Microsoft Entra ID security configuration reviews without the significant overhead of learning tool APIs or complex admin panels from the start.</p> <p>Monkey365 has been designed to tackle these difficulties and get results fast and without any requirements. The results will be visualised in a simplified HTML report to quickly identify potential issues. As such, security consultants will be able to effectively address issues from a single vulnerability report.</p> <p></p> <p>To help with this effort, Monkey365 also provides several ways to identify security gaps in the desired tenant setup and configuration. Monkey365 provides valuable recommendations on how to best configure those settings to get the most out of your Microsoft 365 tenant or Azure subscription.</p>"},{"location":"#architecture","title":"Architecture","text":"<p>Monkey365 works in three phases. In the first phase, collectors will issue queries against the multiple data sources to retrieve the desired metadata about targeted tenant or subscription, and then will collect information. Once all the necessary metadata is collected, the result is passed to an internal module in order to start the verifying phase, in which the tool uses the data collected in first phase to perform query search with a default set of rules, as a mechanism to evaluate the configuration and to search for potential misconfigurations and security issues. The third phase starts to generate reports, such as an HTML report containing structured data for quick checking and verification of the results.</p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Getting Started</li> <li>License and Contributing</li> <li>Support</li> <li>Disclaimer</li> <li>Sample report</li> </ul>"},{"location":"authentication/","title":"Authentication","text":"<p>Monkey365 offers many ways to connect to both Azure and Microsoft 365 environments. This section covers the authentication process against Azure or Microsoft 365, as well as the supported authentication options, including:</p> <ul> <li>Interactive browser authentication</li> <li>Authentication with a username and password</li> <li>Device Code Authentication</li> <li>Client Credential Authentication</li> </ul>"},{"location":"authentication/#interactive-browser-authentication","title":"Interactive browser authentication","text":"<p>Interactive browser authentication enables the monkey 365 PowerShell module for all operations allowed by the interactive login credentials. Please, note that if you are using a user with owner or administrator permissions within the subscription in scope, the monkey365 tool will inherent these permissions to all resources in that subscription without having to assign any specific permissions. Please, see the permissions for further details.</p>"},{"location":"authentication/#resource-owner-password-credentials","title":"Resource Owner Password Credentials","text":"<p>The Microsoft identity platform supports the OAuth 2.0 Resource Owner Password Credentials (ROPC) grant, which allows an application to sign in the user by directly handling their password. In this flow, client identification (e.g. user's email address) and user's credentials is sent to the identity server, and then a token is received.</p>"},{"location":"authentication/#device-code-authentication","title":"Device code authentication","text":"<p>Interactive authentication with Microsoft Entra ID requires a web browser. However, in operating systems that do not provide a Web browser, such as containers, command line tools or non-gui systems, Device code flow lets the user use another computer to sign-in interactively. The tokens will be obtained through a two-step process.</p>"},{"location":"authentication/#client-credential-authentication","title":"Client credential authentication","text":"<p>This type of grant is commonly used for machine-to-machine interactions that must run in the background, such as daemons, or service accounts. In this case, Microsoft Entra ID authenticates and authorizes the app rather than a user. During this step, the client has to authenticate itself to Microsoft Entra ID. The Microsoft identity platform allows the confidential client to authenticate using a shared secret, certificate or federated credential.</p>"},{"location":"basic-usage/","title":"Basic Usage","text":"<p>The following command will provide the list of available command line options: <pre><code>Get-Help Invoke-Monkey365\n</code></pre></p> <p>To get a list of examples use: <pre><code>Get-Help Invoke-Monkey365 -Examples\n</code></pre></p> <p>To get a list of all options and examples with detailed info use: <pre><code>Get-Help Invoke-Monkey365 -Detailed\n</code></pre></p> <p>This example retrieves information from Azure AD and SharePoint Online and then print results. If credentials are not supplied, Monkey365 will prompt for credentials. <pre><code>$param = @{\n    Instance = 'Microsoft365';\n    Collect = 'SharePointOnline';\n    PromptBehavior = 'SelectAccount';\n    IncludeEntraID = $true;\n    ExportTo = 'PRINT';\n}\n$assets = Invoke-Monkey365 @param\n</code></pre></p> <p>This example retrieves information from specific Azure subscription and Tenant and prints results to a local variable. If credentials are not supplied, Monkey365 will prompt for credentials. <pre><code>$param = @{\n    Instance = 'Azure';\n    Collect = 'All';\n    PromptBehavior = 'SelectAccount';\n    Subscriptions = '00000000-0000-0000-0000-000000000000';\n    TenantID = '00000000-0000-0000-0000-000000000000';\n    ExportTo = 'PRINT';\n}\n$assets = Invoke-Monkey365 @param\n</code></pre></p> <p>This example retrieves information from specific Azure subscription and Tenant and will export data driven to CSV, JSON, HTML, and XML format into monkey-reports folder. The script will connect to Azure using the client credential flow. <pre><code>$param = @{\n    ClientId = '00000000-0000-0000-0000-000000000000';\n    ClientSecret = (\"MySuperClientSecret\" | ConvertTo-SecureString -AsPlainText -Force)\n    Instance = 'Azure';\n    Collect = 'All';\n    Subscriptions = '00000000-0000-0000-0000-000000000000';\n    TenantID = '00000000-0000-0000-0000-000000000000';\n    ExportTo = @(\"CLIXML\",\"CSV\",\"JSON\",\"HTML\");\n}\n$assets = Invoke-Monkey365 @param\n</code></pre></p> <p>This example retrieves information from specific Azure subscription and Tenant and will export data driven to CSV, JSON, HTML, and XML format into monkey-reports folder. The script will connect to Azure using the client credential flow. <pre><code>$param = @{\n    ClientId = '00000000-0000-0000-0000-000000000000';\n    certificate = 'C:\\monkey365\\testapp.pfx';\n    CertFilePassword = (\"MySuperCertSecret\" | ConvertTo-SecureString -AsPlainText -Force);\n    Instance = 'Microsoft365';\n    Collect = 'SharePointOnline';\n    Subscriptions = '00000000-0000-0000-0000-000000000000';\n    TenantID = '00000000-0000-0000-0000-000000000000';\n    ExportTo = @(\"CLIXML\",\"CSV\",\"JSON\",\"HTML\");\n}\n$assets = Invoke-Monkey365 @param\n</code></pre></p>"},{"location":"disclaimer/","title":"Disclaimer","text":""},{"location":"disclaimer/#disclaimers-and-the-azure-penetration-testing-policy","title":"Disclaimers, and the Azure Penetration testing policy","text":"<ul> <li> <p>To the best of our knowledge Monkey365's collectors are compliant with the Azure Penetration testing policy, but as a modular tool, we cannot guarantee this will be the case in every situation. It is entirely your responsibility to ensure that you know such requirements and how you use Monkey365 is compliant with the Azure Penetration testing policy.</p> </li> <li> <p>Although notifying Microsoft of pen testing activities is no longer required you must still comply with the Microsoft Cloud Unified Penetration Testing Rules of Engagement</p> </li> <li> <p>As with any other security tool, it is your responsibility to get proper authorization before using Monkey365 outside of your tenant/subscription.</p> </li> <li> <p>Please note that this PowerShell module was designed to help companies to make both Azure and Microsoft365 more secure and should never be used maliciously. </p> </li> <li> <p>Monkey365 is software that comes with absolutely no warranties, either implied or explicit. By using Monkey365, you take full responsibility with any action taken using this software.</p> </li> </ul>"},{"location":"install-instructions/","title":"Installation","text":"<p>This section covers the process of installing Monkey365 module from GitHub using PowerShell.</p>"},{"location":"install-instructions/#operating-system-support","title":"Operating System Support","text":"<p>The Monkey365 codebase was upgraded to support PowerShell Core and MSAL, which is the new authentication platform library for both Azure and Microsoft 365. These new features make the code OS independent. It has been tested on Windows, Linux (Ubuntu, Debian), as well as on Ubuntu-On-Windows.</p> <p>The following platforms are supported:</p> <ul> <li>Windows PowerShell 5.1 with .NET Framework 4.7.2 or greater</li> <li>PowerShell 7.1 or greater on Linux and Windows</li> </ul>"},{"location":"install-instructions/#prerequisites","title":"Prerequisites","text":"<p>Monkey365 works out of the box with PowerShell. You can check your PowerShell version executing the command <code>$PsVersionTable</code></p> <pre><code>PS C:\\Users\\monkeyuser&gt; $PSVersionTable\n\nName                           Value\n----                           -----\nPSVersion                      7.2.4\nPSEdition                      Core\nGitCommitId                    7.2.4\nOS                             Microsoft Windows 10.0.19044\nPlatform                       Win32NT\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\nPSRemotingProtocolVersion      2.3\nSerializationVersion           1.1.0.1\nWSManStackVersion              3.0\n</code></pre>"},{"location":"install-instructions/#install-powershell-on-non-windows-platforms","title":"Install PowerShell on non-Windows platforms","text":"<p>PowerShell 7.x can be installed on macOS, Linux, and Windows but is not installed by default. For installation on non-Windows systems (i.e., Linux or macOS) please refer to the installation notes on Microsoft:</p> <p>Get PowerShell</p>"},{"location":"install-instructions/#install-monkey365","title":"Install Monkey365","text":""},{"location":"install-instructions/#git","title":"Git","text":"<pre><code># change path to Module directory\nPS C:\\Users\\monkeyuser&gt; Push-Location ~\\Documents\\WindowsPowerShell\\Modules\n\n# clone repository\nPS C:\\Users\\monkeyuser\\Documents\\WindowsPowerShell\\Modules&gt; git clone https://github.com/silverhack/monkey365.git\n\n# return to original location\nPS C:\\Users\\monkeyuser\\Documents\\WindowsPowerShell\\Modules&gt; Pop-Location\n</code></pre>"},{"location":"install-instructions/#manual","title":"Manual","text":"<p>You can download the latest zip by clicking here. Once downloaded, you must extract the file and extract the files to a suitable directory.</p> <p>Once you have unzipped the zip file, you can use the PowerShell V3 Unblock-File cmdlet to unblock files</p> <pre><code>Get-ChildItem -Recurse c:\\monkey365 | Unblock-File\n</code></pre>"},{"location":"install-instructions/#import-module","title":"Import module","text":"<p>Once you have installed the monkey365 module on your system, you will likely want to import the module with the Import-Module cmdlet. Assuming that monkey365 is located in the <code>PSModulePath</code>, PowerShell would load monkey365 into active memory: <pre><code>Import-Module monkey365\n</code></pre> If monkey365 is not located on a <code>PSModulePath</code> path, you can use an explicit path to import: <pre><code>Import-Module C:\\temp\\monkey365\n</code></pre> You can also use the <code>Force</code> parameter in case you want to reimport the monkey365 module into the same session <pre><code>Import-Module C:\\temp\\monkey365 -Force\n</code></pre></p>"},{"location":"license-contributing/","title":"License and Contributing","text":"<p>Monkey365 is licensed as Apache License 2.0 as specified in each PS1 file. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0</p> <p>Additionaly, the following components are used in order to generate the HTML report:</p> <ul> <li>Bootstrap, MIT License - https://getbootstrap.com/docs/5.2/about/license/</li> <li>DataTables, MIT License - https://www.datatables.net/license/mit</li> <li>MarkDig, BSD-2-Clause license - https://github.com/xoofx/markdig/blob/master/license.txt</li> <li>JQuery, MIT License - https://github.com/jquery/jquery/blob/main/LICENSE.txt</li> <li>Fontawesome, CC BY 4.0 License - https://fontawesome.com/license/free</li> <li>ChartJs, MIT License - https://github.com/chartjs/Chart.js/blob/master/LICENSE.md</li> <li>highlight.js, BSD 3-Clause license - https://github.com/highlightjs/highlight.js/blob/main/LICENSE</li> <li>Azure icons, Microsoft license - https://docs.microsoft.com/en-us/azure/architecture/icons/</li> <li>Microsoft 365 icons, Microsoft license</li> </ul> <p>Monkey365 welcomes all types of contributions that will help us to refine the tool. Testing and feedback on different PowerShell modules and collectors are ways everyone can help in addition to module features or bug fixes, so any support would be much appreciated.</p> <p>If you are interested in contributing directly to Monkey365, here is how you can get started:</p>"},{"location":"license-contributing/#report-issues","title":"Report issues","text":"<p>Monkey365 uses GitHub issues to track bugs and feature requests. This is the best place to report bugs. If you have what looks like a bug, or you would like to make a feature request, feel free to open a ticket on the Monkey365 repository on GitHub, but please, you should keep a few things in mind:</p> <ul> <li>Before you file an issue, please search existing issues to see if it is already covered</li> <li>Please include detailed information about how to reproduce the problem</li> <li>Write precise steps to reproduce</li> </ul>"},{"location":"license-contributing/#improve-documentation","title":"Improve documentation","text":"<p>We use <code>mkdocs</code> to build the documentation and deploy to GitHub Pages. You can easily contribute with new docs or improving existing ones. To run documentation locally, run:</p> <ul> <li>Inside the Monkey365 repository folder run: <pre><code>pip install -r requirements-docs.txt\nmkdocs serve\n</code></pre></li> <li>Documentation will be served on localhost:8000</li> <li>You can find all pages within the monkey365/docs directory</li> <li>Make all needed changes or add new documents</li> <li>When you are ready, send a pull request to us for review and merge</li> <li>If you want to know more details about how to use the MkDocs, please visit MkDocs</li> </ul>"},{"location":"license-contributing/#thank-you","title":"Thank you","text":"<p>Thank you in advance for your contribution!</p> <p>For any questions or concerns feel free to contact me! Follow me on Twitter. Absolutely my DMs are open ;)</p>"},{"location":"permissions/","title":"Permissions","text":"<p>The module will not change or modify any assets deployed in an Azure subscription. Monkey365's only perform read-only access operations. Monkey365 cannot manipulate or change data and cannot influence the resources within Azure or Microsoft 365.</p> <p>Depending on what workloads you are trying to connect, Monkey365 will require that the provided identity have the following roles according to the principle of least privilege:</p>"},{"location":"permissions/#interactive-authentication","title":"Interactive authentication","text":"<ul> <li>Microsoft Entra ID and Azure environments<ul> <li>Global Reader and Security Reader roles in all the subscriptions to assess</li> </ul> </li> <li>Microsoft 365 environments<ul> <li>Grant the given identity the role of Global Reader</li> <li>For SharePoint Online, grant the given identity the role of Sharepoint Administrator. Please note that Global Reader role can't access to SharePoint admin features as a reader using PowerShell. Please refer to the Global Reader notes on Microsoft.</li> </ul> </li> </ul>"},{"location":"permissions/#service-principal-authentication","title":"Service Principal Authentication","text":"<p>Access to APIs and Microsoft services require configuration of access scopes and roles. If you want a client application to access Azure and Microsoft 365 services, configure permissions to access the API in the app registration. The following permissions must be granted to the client application created in Azure:</p> <ul> <li>Microsoft Entra ID environment<ul> <li>Directory.Read.All</li> <li>Policy.Read.All</li> <li>UserAuthenticationMethod.Read.All</li> </ul> </li> <li>Azure<ul> <li>Reader role in all the subscriptions to assess</li> </ul> </li> <li>SharePoint Online<ul> <li>Sites.FullControl.All</li> </ul> </li> <li>Exchange Online and Security and Compliance<ul> <li>Exchange.ManageAsApp</li> <li>Grant the given identity the role of Global Reader</li> </ul> </li> </ul>"},{"location":"permissions/#references","title":"References","text":"<p>https://learn.microsoft.com/en-us/powershell/exchange/app-only-auth-powershell-v2?view=exchange-ps</p> <p>https://learn.microsoft.com/en-us/sharepoint/dev/solution-guidance/security-apponly-azuread</p>"},{"location":"support/","title":"Support","text":"<p>Monkey365 uses GitHub Issues to track bugs and feature requests.</p> <p>Before you fill an issue, please search the existing issues to avoid duplicates.</p> <ul> <li>For new issues, file your bug or feature request as a new issue.</li> <li>For help, discussion, and support questions about using this project, join or start a discussion.</li> </ul> <p>Support for Monkey365 is limited to the resources listed above.</p>"},{"location":"assets/inc-fabric-icons/","title":"What is a font subset and why should I use one?","text":"<p>As the name implies, a font subset contains a portion of the complete set of characters included in a font. This is useful for fonts like Office UI Fabric's icon font, which includes far more characters than what any single application will need or should serve at once (&gt;1000 characters, which is ~150KB for the .woff). Using a subset ensures that an application is only using the glyphs it needs at any given time, and saves significant bytes over the wire.</p> <p>If you're reading this, you've probably already generated a subset of Fabric's icon font. Follow the instructions below to understand its contents and learn how to integrate it into your project.</p>"},{"location":"assets/inc-fabric-icons/#contents","title":"Contents","text":"<ol> <li>Get started<ul> <li>Folder structure</li> </ul> </li> <li>How to use icon subsets<ul> <li>Which subset should I use?</li> <li>CSS and SCSS subsets</li> <li>TypeScript subsets</li> </ul> </li> <li>Maintaining a subset<ul> <li>Font config options</li> <li>Subset chunk settings</li> </ul> </li> </ol>"},{"location":"assets/inc-fabric-icons/#get-started","title":"Get started","text":""},{"location":"assets/inc-fabric-icons/#folder-structure","title":"Folder structure","text":"<p>Each subset package will include some variation the following files, assuming a font name of <code>fabric-icons</code> (which can be configured in the tool\u2014see Font config options below). Note that if \"Create subset chunks\" was selected when generating a subset, there will be an additional HTML, JSON, CSS, SCSS, and TS file for each generated \"chunked\" subset.</p> <pre><code>fabric-icons\n\u2502   README.md: The docs you're reading now.\n\u2502   microsoft-ui-fabric-assets-license: License and usage terms for the fonts.\n\u2502   fabric-icons.html - Demo HTML for a given subset.\n\u2502\n\u2514\u2500\u2500\u2500 config\n\u2502   \u2502   fabric-icons.json - Configuration file for the subset package.\n|        &gt; Contains the list of icon names to be included as well as options for\n|        &gt; the subset itself. See the section below on \"maintaining a subset\"\n|        &gt; for more details.\n\u2502\n\u2514\u2500\u2500\u2500 css\n|   \u2502   fabric-icons.css - @font-face definition and icon classes for the subset. Links to the subsetted font file.\n|   \u2502   fabric-icons-inline.css - Same as standard CSS, but includes the base64-encoded WOFF font file inline.\n\u2502\n\u2514\u2500\u2500\u2500 scss\n|   \u2502   fabric-icons.scss - Same as standard CSS and adds a mixin for each icon.\n|   \u2502   fabric-icons-inline.scss - Same as standard SCSS, but includes the base64-encoded WOFF font file inline.\n\u2502\n\u2514\u2500\u2500\u2500 fonts\n|   \u2502   fabric-icons.woff - The subsetted icon font.\n\u2502\n\u2514\u2500\u2500\u2500 src\n|   \u2502   index.ts - Contains top-level exports for all subset initialization code.\n|   \u2502   fabric-icons.ts - TypeScript subset options and initialization code.\n|   \u2502   IconNames.ts - Contains const enum of all available icon names for Intellisense.\n</code></pre>"},{"location":"assets/inc-fabric-icons/#how-to-use-icon-subsets","title":"How to use icon subsets","text":"<p>The icon subsets included here are based on the CSS and SCSS approaches of office-ui-fabric-core (see the icons page on the Fabric website), and TypeScript-based approach of <code>@uifabric/icons</code>, which is what's used in office-ui-fabric-react. Each subset can be used independently of either of those projects, meaning your app doesn't need to have them installed in order to use the icon subsets in this package. The instructions here will help you get started quickly using each subset method, but you should refer to the full documentation for each for more detail.</p>"},{"location":"assets/inc-fabric-icons/#which-subset-should-i-use","title":"Which subset should I use?","text":""},{"location":"assets/inc-fabric-icons/#css-and-scss-subsets","title":"CSS and SCSS subsets","text":"<p>The CSS and SCSS methods are similar to what's used in office-ui-fabric-core, which is useful for quickly applying Microsoft's design language to an HTML and CSS-based web app. Both include class names you can use in plain HTML, and differ only in that the SCSS files require a SASS preprocessor to use its icon mixins and build its output into plain CSS.</p> <p>Use the CSS subset if your app is relatively simple (e.g. no build process) or you aren't already using SCSS. Simply add a link to one of the icons CSS files to your page, or <code>@import</code> it into another CSS file, and add the icon classes to HTML elements like so: <pre><code>&lt;i class=\"ms-Icon ms-Icon--Edit\"&gt;&lt;/i&gt;\n</code></pre></p> <p>Use the SCSS subset if your app already uses SCSS in a build pipeline, or you wish to use the icon mixins to inject the icon code into your own class names.</p> <p>For example, if you wish to use the same Edit icon as before but without using the standard <code>.ms-Icon--Edit</code> class, you can use the mixins to inject the icon code into a custom class like so:</p> <pre><code>.myClassName:before { @include ms-Icon--Edit }\n</code></pre> <p>This would result in the following code being generated:</p> <pre><code>.myClassName:before { content: \"\\E70F\"; }\n</code></pre> <p>You may wish to use this approach if there may be multiple versions of Fabric on the page and you want to ensure there won't be any rendering conflicts. However, be sure to either add the <code>.ms-Icon</code> class to those elements or <code>@include ms-Icon</code> in your custom class name as this sets the <code>@font-family</code> to the font in your subset.</p>"},{"location":"assets/inc-fabric-icons/#typescript-subsets","title":"TypeScript subsets","text":"<p>The TypeScript subset method included under <code>src</code> is similar to what's used in <code>@uifabric/icons</code> and will make the most sense in applications that use office-ui-fabric-react controls.</p> <p>As a prerequisite to using these subsets, ensure that your project is configured to build TypeScript. You may wish to use a tool like create-react-app-typescript or Microsoft's own TypeScript-React-Starter. This is a temporary limitation\u2014future updates to the subsetter tool will include pre-compiled subsets that you'll be able to use with simpler configurations.</p> <p>Once your project is configured, in your source code, import the <code>initializeIcons</code> function and call it on the page(s) you wish to use the icons:</p> <pre><code>import { initializeIcons } from 'path-to-subset/src';\n\ninitializeIcons();\n</code></pre> <p>This defines an <code>@font-face</code> rule and registers a map of icon names for the subset. Once initialized, icons can be used through the <code>getIcon</code> API in <code>office-ui-fabric-react</code>, like below:</p> <pre><code>import { Icon } from 'office-ui-fabric-react/lib/Icon';\n\n&lt;Icon iconName='Snow' /&gt;\n</code></pre> <p>CSS classnames can also be used directly on elements using the <code>getIconClassNames</code> API from <code>@uifabric/styling</code>:</p> <pre><code>import { getIconClassName } from '@uifabric/styling';\n\nreturn `&lt;i class=\"${getIconClassName('Snow')}\" /&gt;`;\n</code></pre> <p>More details on JavaScript-based icon usage can be found on Office UI Fabric React's wiki, <code>@uifabric/icons</code>, and <code>@uifabric/styling</code>.</p>"},{"location":"assets/inc-fabric-icons/#maintaining-a-subset","title":"Maintaining a subset","text":"<p>Each subset package has a configuration JSON file that describes which icons are included in that subset and which options were selected for the subset, such as <code>chunkSubsets</code> or <code>excludeGlyphs</code>. This file is used to maintain and update the subset over time--it can be dragged and dropped on to the Fabric Icons tool to pre-populate icon selection and whichever options were chosen in the tool.</p> <p>It is recommended to check this file in to a project's source control and update it each time you make changes to a subset.</p> <p>Most options map to a text field or checkbox in the \"Subset options\" section of the details pane of Fabric Icons tool. This is represented by the \"Tool label\" column below.</p>"},{"location":"assets/inc-fabric-icons/#font-config-options","title":"Font config options","text":"Option Default value Tool label Description <code>fontName</code> <code>'fabric-icons'</code> Font file name The name given to each of the subset's HTML, CSS, SCSS, TS, and JSON files. <code>fontFamilyName</code> <code>'FabricMDL2Icons'</code> Font-family name The name of the font-family given in the @font-face definition for the subset. It is recommended to change this only if the icon subset will be used in conjunction with multiple, different versions of Fabric or other icon subsets on the same page. <code>excludeGlyphs</code> <code>false</code> Exclude selection from subset Produces a subset that excludes the selected glyphs from the full Fabric icon set. This is useful if you wish to create a subset that includes all of the Fabric icons EXCEPT for the selected icons. <code>chunkSubsets</code> <code>false</code> Create subset chunks Controls whether to produce additional subsets that can be loaded on-demand. <code>hashFontFileName</code> <code>false</code> Hash font file name Controls whether to add a unique hash to the .woff font file based on glyph selection and subset options. This is useful for CDN cache busting if you plan on hosting font files on a CDN, which may serve old cached versions of a font without a busting mechanism. <code>glyphs</code> [{ }] N/A The list of icons included in a subset, populated from selecting icons in the Fabric Icons tool. Each glyph is an object with a <code>name</code> and <code>unicode</code> property."},{"location":"assets/inc-fabric-icons/#legacy-options","title":"Legacy options","text":""},{"location":"assets/inc-fabric-icons/#subset-chunk-settings","title":"Subset chunk settings","text":"<p>The maxSubsetSize option was used to configure the size of the subset \"chunks\" that would be auto-generated when doChunkSubsets was enabled. However, since the base icon set is over 2000 icons, it would be very easy to create 2000+ subsets by setting maxSubsetSize to a low number, spamming the tool with requests and wasting resources. Since the default value of 100 is not often changed, the feature has been removed to simplify the experience.</p> <p>Each option here is a property of <code>subsetChunkSettings</code>, and only apply if <code>chunkSubsets</code> is <code>true</code>.</p> Option Default value Tool label Description <code>maxSubsetSize</code> <code>100</code> Max subset chunk size The maximum number of icons to be included in a generated subset chunk. Larger chunks take longer to load as they will have more characters and larger fonts, but smaller chunks may incur more HTTP requests. ---"},{"location":"authentication/authprompts/","title":"Authentication Prompts","text":""},{"location":"authentication/authprompts/#well-known-microsofts-applications","title":"Well Known Microsoft's applications","text":"<p>Monkey365 requires the use of first-party Microsoft registered applications to connect to Microsoft 365 services when Interactive browser authentication or Device Code Authentication method is used.</p>"},{"location":"authentication/authprompts/#multiple-authentication-prompts","title":"Multiple authentication prompts","text":"<p>You may receive multiple authentication prompts depending on:</p> <ul> <li> <p>When multiple services are selected within the -Collect flag</p> </li> <li> <p>If a conditional access policy is configured to require an extra multi-factor authentication</p> </li> </ul> <p>The authentication prompt experience that you can expect is described in the following table:</p> <p> Service Authentication Prompts Exchange Online and Purview Single prompt SharePoint Online Single prompt Microsoft Graph Single prompt Microsoft GraphV2 Single prompt Azure Single prompt <p></p> <p>That means that if a user is selecting for example Exchange Online, Purview and SharePoint Online in the -Collect flag, the user will see multiple authentication prompts. New authentication prompt is needed when the application has its own OAuth Refresh Token and is not shared with other client apps. </p>"},{"location":"authentication/limitations/","title":"Current limitations","text":"<p>Review the following sections to learn about current limitations of Monkey365 on NIX environments.</p>"},{"location":"authentication/limitations/#sharepoint-online-in-powershell-core","title":"SharePoint Online in PowerShell Core","text":"<p>Monkey365 is using the SharePoint Online Management Shell ClientId when Interactive authentication flow is used. In order to give support to .NET Core, developers must set the reply URI to http://localhost, because .NET Core does not have an integrated UI. Due to SharePoint Online Management Shell is not configured to use http://localhost in the reply URI, authentication methods such as Interactive browser authentication or Authentication with a username and password are not supported in SharePoint Online when Monkey365 is executed using PowerShell Core (PowerShell 6 or later and PowerShell in NIX environments). The following options are available to avoid authentication issues:</p>"},{"location":"authentication/limitations/#change-the-authentication-flow","title":"Change the authentication flow","text":"<ul> <li> <p>Change the authentication flow to Device Code Authentication or Certificate-based Authentication.</p> </li> <li> <p>Execute Monkey365 using the PowerShell V5 Default version. Only valid on Windows environments</p> </li> <li> <p>Use the <code>-ForceMSALDesktop</code> parameter will force PowerShell 6 and higher to load .NET MSAL libraries instead of .NET core versions. Only valid on Windows environments</p> </li> </ul>"},{"location":"authentication/limitations/#references","title":"References","text":"<p>https://learn.microsoft.com/en-us/entra/msal/dotnet/how-to/default-reply-uri</p> <p>https://learn.microsoft.com/en-us/azure/active-directory/develop/msal-authentication-flows#authorization-code</p> <p>https://learn.microsoft.com/en-us/azure/active-directory/authentication/concepts-azure-multi-factor-authentication-prompts-session-lifetime</p> <p>https://learn.microsoft.com/en-us/azure/active-directory/develop/reply-url</p>"},{"location":"authentication/overview/","title":"Overview","text":"<p>Monkey365 offers many ways to connect to both Azure and Microsoft 365 environments. This section covers the authentication process against Azure or Microsoft 365, as well as the supported authentication options, including:</p> <ul> <li>Interactive browser authentication </li> <li>Authentication with a username and password</li> <li>Device Code Authentication</li> <li>Client Credential Authentication</li> </ul>"},{"location":"authentication/supported_auth_methods_byapp/","title":"Supported authentication methods by Service","text":"<p>The following table shows the supported authentication methods for each type of service.</p>"},{"location":"authentication/supported_auth_methods_byapp/#windows-environments","title":"Windows Environments","text":"Authentication method Azure AD Portal Azure AD GraphV2 Azure services Exchange Online Purview SharePoint Online Microsoft Teams Interactive browser authentication \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Device code authentication \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Service Principal Authentication (Client Secret) \u274c\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c \u274c\ufe0f \u274c\ufe0f \u274c Service Principal Authentication (Certificate Secret) \u274c\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Resource Owner Password Credentials \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f"},{"location":"authentication/supported_auth_methods_byapp/#nix-environments-net-core","title":"NIX Environments (.NET Core)","text":"Authentication method Azure AD Portal Azure AD GraphV2 Azure services Exchange Online Purview SharePoint Online Microsoft Teams Interactive browser authentication \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f* \u274c* \u2714\ufe0f Device code authentication \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Service Principal Authentication (Client Secret) \u274c\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c \u274c\ufe0f \u274c\ufe0f \u274c Service Principal Authentication (Certificate Secret) \u274c\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Resource Owner Password Credentials \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c* \u2714\ufe0f"},{"location":"authentication/authFlows/devicecode/","title":"Device Code","text":""},{"location":"authentication/authFlows/devicecode/#device-code-authentication","title":"Device code authentication","text":"<p>Interactive authentication with Microsoft Entra ID requires a web browser. However, in operating systems that do not provide a Web browser, such as containers, command line tools or non-gui systems, Device code flow lets the user use another computer to sign-in interactively. The tokens will be obtained through a two-step process.</p>"},{"location":"authentication/authFlows/devicecode/#usage-examples","title":"Usage Examples","text":"<pre><code>$param = @{\n    Instance = 'Microsoft365';\n    Collect = 'SharePointOnline';\n    DeviceCode = $true;\n    IncludeEntraID = $true;\n    ExportTo = 'PRINT';\n}\n$assets = Invoke-Monkey365 @param\n</code></pre>"},{"location":"authentication/authFlows/devicecode/#references","title":"References","text":"<p>https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-device-code</p>"},{"location":"authentication/authFlows/interactive/","title":"Web Browser Interactive","text":""},{"location":"authentication/authFlows/interactive/#interactive-browser-authentication","title":"Interactive browser authentication","text":"<p>Interactive browser authentication enables the <code>Monkey365</code> PowerShell module for all operations allowed by the interactive login credentials. Please, note that if you are using a user with owner or administrator permissions within the subscription in scope, the monkey365 tool will inherent these permissions to all resources in that subscription without having to assign any specific permissions. Please, see the permissions for further details.</p>"},{"location":"authentication/authFlows/interactive/#usage-examples","title":"Usage Examples","text":"<pre><code>$param = @{\n    Instance = 'Microsoft365';\n    Collect = 'SharePointOnline','ExchangeOnline';\n    PromptBehavior = 'SelectAccount';\n    ExportTo = 'PRINT';\n}\n$assets = Invoke-Monkey365 @param\n</code></pre>"},{"location":"authentication/authFlows/interactive/#references","title":"References","text":"<p>https://learn.microsoft.com/en-us/azure/active-directory/develop/msal-authentication-flows</p>"},{"location":"authentication/authFlows/ropc/","title":"Resource Owner Password Credential","text":""},{"location":"authentication/authFlows/ropc/#resource-owner-password-credentials","title":"Resource Owner Password Credentials","text":"<p>The Microsoft identity platform supports the OAuth 2.0 Resource Owner Password Credentials (ROPC) grant, which allows an application to sign in the user by directly handling their password. In this flow, client identification (e.g. user's email address) and user's credentials is sent to the identity server, and then a token is received.</p>"},{"location":"authentication/authFlows/ropc/#security-note","title":"Security Note","text":"<p>There are multiple scenarios in which ROPC is not supported, such as hybrid identity federation access (Azure AD and ADFS) or when conditional access policies are enabled. There are more secure and available recommended alternatives, such as Interactive authentication or Service Principal. </p>"},{"location":"authentication/authFlows/ropc/#usage-examples","title":"Usage Examples","text":"<pre><code>$cred = Get-Credential\n\n$param = @{\n    Instance = 'Microsoft365';\n    Collect = 'SharePointOnline','ExchangeOnline';\n    UserCredentials = $cred;\n    TenantId = '00000000-0000-0000-0000-000000000000';\n    ExportTo = 'PRINT';\n}\n\n$assets = Invoke-Monkey365 @param\n</code></pre>"},{"location":"authentication/authFlows/ropc/#references","title":"References","text":"<p>https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth-ropc</p>"},{"location":"authentication/authFlows/sp/","title":"Service Principal","text":""},{"location":"authentication/authFlows/sp/#service-principal-authentication","title":"Service Principal Authentication","text":"<p>This type of grant is commonly used for machine-to-machine interactions that must run in the background, such as daemons, or service accounts. In this case, Microsoft Entra ID authenticates and authorizes the app rather than a user. During this step, the client has to authenticate itself to Microsoft Entra ID. The Microsoft identity platform allows the confidential client to authenticate using a shared secret, certificate or federated credential.</p>"},{"location":"authentication/authFlows/sp/#usage-examples","title":"Usage Examples","text":""},{"location":"authentication/authFlows/sp/#client-secret-in-command-line-flag","title":"Client secret in command-line flag","text":"<pre><code>$param = @{\n    ClientId = '00000000-0000-0000-0000-000000000000';\n    ClientSecret = (\"MySuperClientSecret\" | ConvertTo-SecureString -AsPlainText -Force)\n    Instance = 'Azure';\n    Collect = 'All';\n    subscriptions = '00000000-0000-0000-0000-000000000000';\n    TenantID = '00000000-0000-0000-0000-000000000000';\n    ExportTo = @(\"HTML\");\n}\nInvoke-Monkey365 @param\n</code></pre>"},{"location":"authentication/authFlows/sp/#client-certificate-in-command-line-flag","title":"Client certificate in command-line flag","text":"<pre><code>$param = @{\n    ClientId = '00000000-0000-0000-0000-000000000000';\n    certificate = 'C:\\monkey365\\testapp.pfx';\n    CertFilePassword = (\"MySuperCertSecret\" | ConvertTo-SecureString -AsPlainText -Force);\n    Instance = 'Microsoft365';\n    Collect = 'SharePointOnline';\n    TenantID = '00000000-0000-0000-0000-000000000000';\n    ExportTo = @(\"HTML\");\n}\nInvoke-Monkey365 @param\n</code></pre>"},{"location":"authentication/authFlows/sp/#references","title":"References","text":"<p>https://learn.microsoft.com/en-us/sharepoint/dev/solution-guidance/security-apponly-azuread</p> <p>https://learn.microsoft.com/en-us/azure/active-directory/develop/quickstart-register-app</p> <p>https://learn.microsoft.com/en-us/powershell/exchange/app-only-auth-powershell-v2?view=exchange-ps</p> <p>https://learn.microsoft.com/en-us/sharepoint/dev/solution-guidance/security-apponly-azureacs</p>"},{"location":"configuration/azure-options/","title":"Azure Options","text":"<p>This section covers the supported options to help customize and automate scans for Azure environments. General options include:</p> <p><code>-Collect</code></p> <p>Select the Azure resources used to gather data. Valid values are:</p> Resource Value Databases Retrieves information from Azure databases, such as Azure SQL, Azure PostgreSQL or MariaDB VirtualMachines Retrieves information from Azure virtual machines SecurityAlerts Retrieves information from security alers StorageAccounts Retrieves information from storage accounts SecurityPolicies Retrieves information from security policy AppServices Retrieves information from App Services KeyVault Retrieves information from Azure KeyVaults RoleAssignment Retrieves information from Azure RBAC All Retrieves all metadata from Azure subscription <p>Currently, you can use tab completion in Monkey365 to complete <code>Collect</code>, <code>Instance</code> and <code>PromptBehavior</code> names. You can autocomplete by pressing the <code>[TAB]</code> and the option will fill in. If more than one option is available, you can press <code>[TAB]</code> twice to display the next possible choice.</p>"},{"location":"configuration/azure-options/#subscriptions","title":"Subscriptions","text":"<p>By default, Monkey365 will show the subscriptions to which the provided identity have access to. A user can select all the subscriptions to which the provided identity have access.</p> <p></p> <p>The <code>-Subscriptions</code> option can be used to scan a number of subscriptions in one execution.</p> <pre><code>$param = @{\n    Instance = 'Azure';\n    Collect = 'All';\n    PromptBehavior = 'SelectAccount';\n    subscriptions = '00000000-0000-0000-0000-000000000000 11111111-1111-1111-1111-111111111111';\n    TenantID = '00000000-0000-0000-0000-000000000000';\n    ExportTo = 'PRINT';\n}\n$assets = Invoke-Monkey365 @param\n</code></pre> <p>The <code>-AllSubscriptions</code> option can be used to scan all the subscriptions.</p> <pre><code>$param = @{\n    Instance = 'Azure';\n    Collect = 'All';\n    PromptBehavior = 'SelectAccount';\n    AllSubscriptions = $true;\n    TenantID = '00000000-0000-0000-0000-000000000000';\n    ExportTo = 'PRINT';\n}\n$assets = Invoke-Monkey365 @param\n</code></pre>"},{"location":"configuration/azure-options/#exclude-azure-resources-from-scans","title":"Exclude azure resources from scans","text":"<p>To ensure that all Azure resources are scanned, we recommend creating exclusions only when it is absolutely necessary. However, there are situations in which you may need to exclude an specific Azure resource, for example a Virtual Machine that is controlled by a third party integrations. </p> <p>The <code>-ExcludedResources</code> option can be used to exclude unwanted azure resources from being scanned.</p> <pre><code>$param = @{\n    Instance = 'Azure';\n    Collect = 'All';\n    PromptBehavior = 'SelectAccount';\n    AllSubscriptions = $true;\n    TenantID = '00000000-0000-0000-0000-000000000000';\n    ExcludedResources = 'C:\\temp\\az_excluded_resources.json';\n    ExportTo = 'HTML';\n}\nInvoke-Monkey365 @param\n</code></pre> <p>This parameter only accepts a JSON file path. This JSON file must have the following structure:</p> <pre><code>{\n\"title\": \"Azure exclusion list\",\n\"exclusions\": [\n{\n\"code\": \"Exclusion title\",\n\"suppress\": {\n\"pattern\": \"*mypattern*\",\n\"justification\": \"Justification text\"\n}\n}\n]\n}\n</code></pre> <p>Consider the following example of a JSON exclusion file to understand how to use the <code>ExcludedResources</code> feature:</p> <pre><code>{\n\"title\": \"Azure exclusion list\",\n\"exclusions\": [\n{\n\"code\": \"Azure VMs\",\n\"suppress\": {\n\"pattern\": \"*excludedmachine*\",\n\"justification\": \"Controlled by Third-Party integrations\"\n}\n},\n{\n\"code\": \"Azure Storage account\",\n\"suppress\": {\n\"pattern\": \"*excludedstorageaccount*\",\n\"justification\": \"Controlled by Third-Party integrations\"\n}\n},\n{\n\"code\": \"Azure Resource Group\",\n\"suppress\": {\n\"pattern\": \"*resourceGroups/excludedrg*\",\n\"justification\": \"Controlled by Third-Party integrations\"\n}\n},\n{\n\"code\": \"Azure Containers\",\n\"suppress\": {\n\"pattern\": \"*resourceGroups/Containers*\",\n\"justification\": \"Controlled by Third-Party integrations\"\n}\n}\n]\n}\n</code></pre>"},{"location":"configuration/configuration-file/","title":"Configuration File","text":"<p>The Monkey365 configuration file contains settings that are used for managing CLI behavior. The configuration file itself is located at <code>$monkey365_DIR/config/monkey_365.config</code>.</p> <p>Configuration file is written in the JSON file format. This file format is followed by a list of key-value entries. Also, Boolean is case-insensitive, and is represented by <code>True</code> (Enabled/must check) and <code>False</code> (Disabled/not check).</p> <p>The following is an example of a configuration file that sets up Monkey365 to use the <code>1.6</code> version of the Microsoft Entra ID API but is also setting the <code>getUsersWithAADInternalAPI</code> key to <code>True</code>. With this change, Monkey365 will use the internal (1.6-internal) API version to extract information regarding Microsoft Entra ID users:</p> <pre><code>\"entraId\": {\n\"useMsGraph\": \"true\",\n\"forceRequestMFA\": \"false\",\n\"getUsersWithAADInternalAPI\": \"true\",\n\"auditLog\":{\n\"enabled\": \"false\",\n\"AuditLogDaysAgo\": \"-7\"\n},\n\"provider\": {\n\"graph\":{\n\"api_version\": \"1.6\",\n\"internal_api_version\": \"1.61-internal\"\n},\n\"portal\":{\n\"GetManagedApplicationsByPrincipalId\": \"true\"\n},\n\"msgraph\":{\n\"api_version\": \"V1.0\"\n}\n}\n}\n</code></pre>"},{"location":"configuration/general-options/","title":"General Options","text":"<p>Monkey365 supports many options to help customize and automate scans. General options include:</p> <p><code>-Environment</code></p> <p>It can be used to set the environment containing the Azure account. Valid values are:</p> <ul> <li>AzureChina</li> <li>AzureGermany</li> <li>AzurePublic</li> <li>AzureUSGovernment</li> </ul> <p>Note: Default value is <code>AzurePublic</code></p> <p><code>-Instance</code></p> <p>Specifies the cloud provider to use. Valid values are:</p> <ul> <li>Azure</li> <li>Microsoft365</li> </ul> <p><code>-TenantID</code></p> <p>It can be used to force Monkey365 to sign in to a tenant</p> <p><code>-IncludeEntraID</code></p> <p>Use this flag to scan a Microsoft Entra ID tenant:</p> <pre><code>$param = @{\n    Instance = 'Microsoft365';\n    Collect = 'ExchangeOnline';\n    PromptBehavior = 'SelectAccount';\n    IncludeEntraID = $true;\n    ExportTo = 'HTML';\n}\nInvoke-Monkey365 @param\n</code></pre> <p><code>-SaveProject</code></p> <p>Saves project to a local folder (Default folder is monkey-reports)</p> <p><code>-Compress</code></p> <p>This flag will compress all the output data into a single zip file (Default folder is monkey-reports\\GUID\\zip)</p> <pre><code>Invoke-Monkey365 -Instance Microsoft365 -Collect ExchangeOnline -ExportTo HTML -Compress\n</code></pre> <p><code>-ImportJob</code></p> <p>Import previously exported jobs</p> <p><code>-PromptBehavior</code></p> <p>Sets the behavior for authentication. Valid values are <code>ForceLogin</code>, <code>Never</code>, <code>NoPrompt</code> and <code>SelectAccount</code></p> <p><code>-ForceAuth</code></p> <p>Force the prompt behavior and user will be prompted for credentials.  Same as <code>-PromptBehavior ForceLogin</code></p> <p><code>-ForceMSALDesktop</code></p> <p>force PowerShell 6 and higher to load .NET MSAL libraries instead of .NET core versions. Only valid on Windows environments</p> <p><code>-RuleSet</code></p> <p>Specifies the path to JSON rules file.</p> <p><code>-ExcludeCollector</code></p> <p>This option can be used to exclude collectors from being executed. For example, there are situations when you may need to exclude an specific collector, for example in tenants with thousands of users/mailboxed, that would slow down the scan.</p> <pre><code>$param = @{\n    Instance = 'Microsoft365';\n    Collect = 'ExchangeOnline';\n    PromptBehavior = 'SelectAccount';\n    TenantID = '00000000-0000-0000-0000-000000000000';\n    ExcludeCollector = exo0003, exo0004, exo0005;\n    ExportTo = 'HTML';\n}\nInvoke-Monkey365 @param\n</code></pre>"},{"location":"configuration/microsoft365-options/","title":"Microsoft365 Options","text":"<p>This section covers the supported options to help customize and automate scans for Microsoft 365 environments. General options include:</p> <p><code>--Collect</code></p> <p>Select the Microsoft 365 resources used to gather data. Valid values are:</p> Resource Value ExchangeOnline Retrieves information from Exchange Online, such as mailboxes configuration, inbound and outbound connectors, transport configuration, etc.. SharePointOnline Retrieves information from SharePoint Online, including lists, users, groups, orphaned users, etc.. Purview Retrieves information from Microsoft Purview MicrosoftTeams Retrieves information from Microsoft Teams Microsoft365 Retrieves basic information from Microsoft 365"},{"location":"configuration/rate-limit/","title":"Handle Rate Limit","text":"<p>The Monkey365 tool runs with 2 threads by default. Additionally, Monkey365 handles rate limiting by implementing a <code>MaxQueue</code> value that configures the number of worker threads that are available for the tool. When the tool detects that the <code>MaxQueue</code> limit is reached, the <code>Start-Sleep</code> command will be used to delay requests for a fixed amount of time. This is often sufficient to complete a run.</p> <p>In addition to the default execution, the <code>Threads</code> option can be used to modify the default behavior.</p> <p>The following example will fetch data from specific Azure subscription and Tenant and then will export results to CSV. If credentials are not supplied, Monkey365 will prompt for credentials. In addition, the <code>Threads</code> flag is set to <code>4</code>.</p> <pre><code>$param = @{\n    Instance = 'Azure';\n    Collect = 'All';\n    PromptBehavior = 'SelectAccount';\n    subscriptions = '00000000-0000-0000-0000-000000000000';\n    TenantID = '00000000-0000-0000-0000-000000000000';\n    ExportTo = 'CSV';\n    Threads = 4;\n}\n$assets = Invoke-Monkey365 @param\n</code></pre> <p>Regarding Exchange Online, and since the maximum number of remote connections allowed is 5, Monkey365 will limit the remote connections to one open remote PowerShell connection, regardless of number of configured threads. This is often enough to complete all jobs.</p> <p>For information regarding connecting Exchange Online, please refer to the installation notes on Microsoft:</p> <p>Connect to Exchange Online PowerShell</p>"},{"location":"docker/docker/","title":"Overview","text":"<p>The docker image is an Ubuntu for Linux and Windows Server Core for Windows that comes with all pre-requisite components required to run Monkey365. These are non-root container images.</p>"},{"location":"docker/docker/#running-the-container","title":"Running the Container","text":"<p>To run this image, use the <code>build.ps1</code> script located in the root folder:</p> <pre><code>.\\build.ps1 -Name monkey365 -version latest -Path .\\docker\\Dockerfile_linux\n</code></pre> <p>This will create a new Monkey365 Docker image based on Ubuntu for Linux.</p> <p>The following command can be used to create a Windows-based container:</p> <pre><code>.\\build.ps1 -Name monkey365 -version latest -Path .\\docker\\Dockerfile_windows\n</code></pre> <p>Once container is created, you can run monkey365 container using <code>docker run -it monkey365</code></p>"},{"location":"docker/docker/#supported-environment-variables","title":"Supported environment variables","text":"<p>The following environment variables are supported:</p> <ul> <li>MONKEY_ENV_MONKEY_USER</li> <li>MONKEY_ENV_MONKEY_PASSWORD</li> <li>MONKEY_ENV_TENANT_ID</li> <li>MONKEY_ENV_SUBSCRIPTIONS</li> <li>MONKEY_ENV_COLLECT</li> <li>MONKEY_ENV_EXPORT_TO</li> <li>MONKEY_ENV_WRITELOG</li> <li>MONKEY_ENV_VERBOSE</li> <li>MONKEY_ENV_DEBUG</li> </ul> <p>You can also use the -e, --env, and --env-file flags to set simple environment variables in the container.</p> <pre><code>docker run -it --env-file monkey.env monkey365 pwsh \"/home/monkey365/monkey365/monkey365.ps1\"\n</code></pre> <p>In case you want to map a directory to a docker container directory, you can use the --volume flag, as shown below:</p> <pre><code>docker run -it --env-file monkey.env `\n-volume=C:\\temp:/home/monkey365/monkey365/monkey-reports `\nmonkey365 pwsh \"/home/monkey365/monkey365/monkey365.ps1\"\n</code></pre>"},{"location":"exporting/export-clixml/","title":"CLIXML","text":""},{"location":"exporting/export-clixml/#export-to-clixml","title":"Export To CLIXML","text":"<p>The <code>-ExportTo CLIXML</code> will serialize an XML-based representation of report and will store it in a file.</p> <pre><code>$p = @{\n    Instance = 'Azure';\n    Collect = 'All';\n    PromptBehavior = 'SelectAccount';\n    AllSubscriptions = $true;\n    TenantID = '00000000-0000-0000-0000-000000000000';\n    ExportTo = 'CLIXML';\n}\nInvoke-Monkey365 @p\n</code></pre>"},{"location":"exporting/export-clixml/#clixml-properties","title":"CLIXML Properties","text":"<p>Properties will be the same as JSON output.</p>"},{"location":"exporting/export-csv/","title":"CSV","text":""},{"location":"exporting/export-csv/#export-to-csv","title":"Export To CSV","text":"<p>You can easily export reports as a CSV file. Simply select <code>-ExportTo CSV</code> as shown below:</p> <pre><code>$p = @{\n    Instance = 'Azure';\n    Collect = 'All';\n    PromptBehavior = 'SelectAccount';\n    AllSubscriptions = $true;\n    TenantID = '00000000-0000-0000-0000-000000000000';\n    ExportTo = 'CSV';\n}\nInvoke-Monkey365 @p\n</code></pre>"},{"location":"exporting/export-csv/#csv-headers","title":"CSV Headers","text":"<p>The following columns are included for Microsoft 365:</p> <pre><code>TIMESTAMP\nTENANTID\nTENANTNAME\nUNIQUEID\nPROVIDER\nFINDINGID\nFINDINGTITLE\nFINDINGTYPE\nFINDINGTAGS\nSERVICENAME\nSEVERITYID\nSEVERITY\nFINDINGDESCRIPTION\nFINDINGRATIONALE\nFINDINGREMEDIATION\nFINDINGREFERENCEURL\nRESOURCELOCATION\nSTATUS\nRESOURCETYPE\nRESOURCEID\nRESOURCENAME\nRESOURCEGROUP\nRESOURCETAGS\nCOMPLIANCE\nNOTES\nMONKEY365VERSION\n</code></pre> <p>For Azure scans, the following columns are included:</p> <pre><code>TIMESTAMP\nTENANTID\nTENANTNAME\nSUBSCRIPTIONID\nSUBSCRIPTIONNAME\nUNIQUEID\nPROVIDER\nFINDINGID\nFINDINGTITLE\nFINDINGTYPE\nFINDINGTAGS\nSERVICENAME\nSEVERITYID\nSEVERITY\nFINDINGDESCRIPTION\nFINDINGRATIONALE\nFINDINGREMEDIATION\nFINDINGREFERENCEURL\nRESOURCELOCATION\nSTATUS\nRESOURCETYPE\nRESOURCEID\nRESOURCENAME\nRESOURCEGROUP\nRESOURCETAGS\nCOMPLIANCE\nNOTES\nMONKEY365VERSION\n</code></pre>"},{"location":"exporting/export-html/","title":"HTML","text":"<p>Monkey365 provides an internal module which provides methods to convert internal data to HTML format. Also, internal module adds additional support to Markdown syntax with Markdig.</p> <p></p> <p>The following example can be used to export all data to an HTML file.</p> <pre><code>$param = @{\n    Instance = 'Azure';\n    Collect = 'All';\n    PromptBehavior = 'SelectAccount';\n    AllSubscriptions = $true;\n    TenantID = '00000000-0000-0000-0000-000000000000';\n    ExportTo = 'HTML';\n}\nInvoke-Monkey365 @param\n</code></pre>"},{"location":"exporting/export-html/#customize-html","title":"Customize HTML","text":"<p>A Monkey365 report uses JSON-like configuration objects to visualize data in a variety of ways. This approach makes it easy to modify and combine tables, style them, and make them interactive with buttons. You can use your favorite text editor in order to modify these configuration files.</p>"},{"location":"exporting/export-html/#html-configuration-files-location","title":"HTML Configuration Files Location","text":"<p>All the table formats are stored within JSON rules and data is rendered with <code>JQuery DataTables</code>. Basic table and table <code>as list</code> are the available formats. Please, note that not all features of HTML tables are supported.</p>"},{"location":"exporting/export-html/#html-table-examples","title":"HTML Table examples","text":""},{"location":"exporting/export-html/#table-as-list","title":"Table As List","text":"<p>Take for example the following code extracted from the azure-app-services-ad-managed-identity-missing.json Monkey365 rule.</p> <pre><code>{\n\"data\": {\n\"properties\": {\n\"name\": \"Application Name\",\n\"kind\": \"Kind\",\n\"location\": \"Location\",\n\"properties.defaultHostName\": \"HostName\",\n\"properties.httpsOnly\": \"Https Only\",\n\"identity.principalId\": \"Principal ID\",\n\"appConfig.properties.ftpsState\": \"SSL FTP\",\n\"appConfig.properties.minTlsVersion\": \"TLS Version\",\n\"appConfig.properties.siteAuthSettings.Enabled\": \"Site Auth Enabled\"\n},\n\"expandObject\": null\n},\n\"table\": \"asList\",\n\"decorate\": [\n\n],\n\"emphasis\": [\n\"Principal ID\"\n]\n}\n</code></pre> <p>In the above example, this will result in the data being rendered in a single table formatted <code>as list</code>.</p> <p></p>"},{"location":"exporting/export-html/#normal-table","title":"Normal Table","text":"<p>In this example, the following code that was extracted from the azure-storage-accounts-https-traffic-enabled.json Monkey365 rule is used to render data for Storage accounts missing key rotation finding into a default table.</p> <pre><code>{\n\"data\": {\n\"properties\": {\n\"name\": \"Name\",\n\"CreationTime\": \"Creation Time\",\n\"location\": \"Location\",\n\"supportsHttpsTrafficOnly\": \"Https Only\"\n},\n\"expandObject\": null\n},\n\"table\": \"Normal\",\n\"decorate\": [\n\n],\n\"emphasis\": [\n\n]\n}\n</code></pre> <p></p>"},{"location":"exporting/export-html/#add-raw-data-button","title":"Add Raw data button","text":"<p>Table elements can be configured to show raw data on Bootstrap Modal. In order to route for showing raw data with modals, the <code>showModalButton</code> should be set to <code>True</code>, as shown below:</p> <p><pre><code>{\n\"actions\": {\n\"objectData\": {\n\"expand\": [\n\"name\",\n\"location\",\n\"ResourceGroupName\",\n\"CreationTime\",\n\"supportsHttpsTrafficOnly\"\n],\n\"limit\": null\n},\n\"showModalButton\": \"True\"\n}\n}\n</code></pre> The above example will result in the data being rendered in a single table formatted as normal table, and a modal button in last column.</p> <p></p> <p>Note This feature is only supported in tables formatted as a <code>Normal</code> table.</p>"},{"location":"exporting/export-html/#add-direct-link-button","title":"Add direct link button","text":"<p>Table elements can be configured to add a direct link to the Azure console section associated with the finding in the report. In order to route for showing raw data with modals, the <code>showGoToButton</code> should be set to <code>True</code> along with the <code>actions</code>, as shown below:</p> <p><pre><code>{\n\"actions\": {\n\"objectData\": {\n\"expand\": [\n\"name\",\n\"location\",\n\"ResourceGroupName\",\n\"CreationTime\",\n\"supportsHttpsTrafficOnly\"\n],\n\"limit\": null\n},\n\"showGoToButton\": \"True\",\n\"showModalButton\": \"True\"\n}\n}\n</code></pre> The above example will result in the data being rendered in a single table formatted as normal table, and a direct link button in last column.</p> <p></p> <p>Note This feature is only supported in tables formatted as a <code>Normal</code> table. Please, also note that since this feature is experimental, we welcome your feedback.</p>"},{"location":"exporting/export-json/","title":"JSON","text":""},{"location":"exporting/export-json/#export-to-json","title":"Export To JSON","text":"<p>The JSON output is based on the Open CyberSecurity Schema Framework schema for cloud findings.</p> <p>You can easily export all findings as a JSON file. Simply select <code>-ExportTo JSON</code> as shown below:</p> <pre><code>$p = @{\n    Instance = 'Azure';\n    Collect = 'All';\n    PromptBehavior = 'SelectAccount';\n    AllSubscriptions = $true;\n    TenantID = '00000000-0000-0000-0000-000000000000';\n    ExportTo = 'JSON';\n}\nInvoke-Monkey365 @p\n</code></pre>"},{"location":"exporting/export-json/#json-properties","title":"JSON Properties","text":"<p>The following is an example of output:</p> <pre><code>{\n\"metadata\": {\n\"eventCode\": \"aad_sbd_enabled\",\n\"product\": {\n\"name\": \"Monkey365\",\n\"vendorName\": \"Monkey365\",\n\"version\": \"0.98\"\n},\n\"version\": \"1.1.0\"\n},\n\"severityId\": 0,\n\"severity\": \"Unknown\",\n\"status\": \"New\",\n\"statusCode\": \"pass\",\n\"statusDetail\": null,\n\"statusId\": 1,\n\"unmapped\": {\n\"provider\": \"EntraID\",\n\"pluginId\": \"aad0024\",\n\"apiType\": \"EntraIDPortal\",\n\"resource\": \"EntraIDPortal\"\n},\n\"activityName\": \"Create\",\n\"activityId\": 1,\n\"findingInfo\": {\n\"createdTime\": \"2024-08-21T11:47:48Z\",\n\"description\": \"Security defaults in Microsoft Entra ID (Azure Active Directory) make it easier to be secure and help protect your organization. Security defaults\n contain preconfigured security settings for common attacks.Microsoft is making security defaults available to everyone. The goal is to ensure that all organizations \nhave a basic level of security-enabled at no extra cost. The use of security defaults however will prohibit custom settings which are being set with more advanced set\ntings.\",\n\"productId\": \"Monkey365\",\n\"title\": \"Ensure Security Defaults is disabled on Microsoft Entra ID\",\n\"id\": \"Monkey365-aad-sbd-enabled-a4807c0361194a9a9da91e02458bd3ff-zxuQ2OfB3Ag\"\n},\n\"resources\": {\n\"cloudPartition\": \"6\",\n\"region\": null,\n\"data\": null,\n\"group\": {\n\"name\": \"General\"\n},\n\"labels\": null,\n\"name\": null,\n\"type\": null,\n\"id\": null\n},\n\"categoryName\": \"Findings\",\n\"categoryId\": 2,\n\"className\": \"Detection\",\n\"classId\": 2004,\n\"cloud\": {\n\"account\": {\n\"name\": \"Contoso\",\n\"type\": \"AzureADAccount\",\n\"typeId\": \"6\",\n\"id\": \"a4807c03-6119-4a9a-9da9-1e02458bd3ff\"\n},\n\"organization\": {\n\"name\": \"Contoso\",\n\"id\": \"a4807c03-6119-4a9a-9da9-1e02458bd3ff\"\n},\n\"provider\": \"Microsoft365\",\n\"region\": \"global\"\n},\n\"time\": \"2024-08-21T11:47:48Z\",\n\"remediation\": {\n\"description\": \"From Azure Console1. Sign in to the Azure portal as a security administrator, Conditional Access administrator, or global administrator.2. Bro\nwse to Microsoft Entra ID  Properties.3. Select Manage security defaults.4. Set the Enable security defaults toggle to No.5. Select Save.\",\n\"references\": [\n\"https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/users-default-permissions\",\n\"http://www.rebeladmin.com/2019/04/step-step-guide-restrict-azure-ad-administration-portal/\",\n\"https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/concept-fundamentals-security-defaults\",\n\"https://techcommunity.microsoft.com/t5/azure-active-directory-identity/introducing-security-defaults/ba-p/1061414\"\n]\n},\n\"typeId\": 200401,\n\"typeName\": \"Create\"\n}\n</code></pre>"},{"location":"exporting/exporting-data/","title":"Overview","text":"<p>Monkey365 has built-in support for exporting data to a large variety of formats, including CSV, CLIXML and JSON. For example, the CSV output format is a comma-separated output that can be imported into i.e., Excel spreadsheets. The JSON format is pretty similar to JavaScript object, so it can be used as a data format by any programming language. Finally, CLIXML will create an XML-based representation of all findings and will store it in a file. This section page documents how Monkey365's data may be exported to these formats.</p> <ul> <li>Export Data to CSV </li> <li>Export Data to HTML</li> <li>Export Data to CLIXML</li> <li>Export Data to JSON</li> </ul>"},{"location":"exporting/exporting-data/#data-location","title":"Data Location","text":"<p>Depending on what format you are exporting to, the <code>-ExportTo</code> parameter presents you with slightly different options. Once Monkey365 has finished running, all the exported data are stored under Monkey365/monkey-reports/$GUID/$FORMAT/$FILE. The following demonstrates some examples in which the data may be programmatically accessed using various common languages.</p>"},{"location":"exporting/exporting-data/#import-json-data-in-python","title":"Import JSON data in Python","text":"<p>The following code snippet illustrates how one may load the Monkey365 data in a Python script (assuming that report data was previously exported to JSON format):</p> <pre><code>import json\n\nfile = 'C:/temp/monkey365/monkey-reports/00000000-0000-0000-0000-000000000000/json/monkey3650000000000000000000000000000000020240902155926.json'\n\nwith open(file) as f:\n\njson_data = json.load(f)\n\nreturn json_data\n</code></pre>"},{"location":"exporting/exporting-data/#import-json-data-in-powershell","title":"Import JSON data in PowerShell","text":"<p>The following code snippet illustrates how one may load the Monkey365 data in a PowerShell script (assuming that report data was previously exported to JSON format):</p> <pre><code>PS C:\\temp\\monkey365&gt; $json_data = (Get-Content -Raw .\\monkey-reports\\00000000-0000-0000-0000-000000000000\\json\\monkey3650000000000000000000000000000000020240902155926.json) | ConvertFrom-Json\n</code></pre>"},{"location":"exporting/exporting-data/#import-clixml-data-in-powershell","title":"Import CLIXML data in PowerShell","text":"<p>The following code snippet illustrates how one may load the Monkey365 data in a PowerShell script (assuming that report data was previously exported to CLIXML format):</p> <pre><code>PS C:\\temp\\monkey365&gt; $clixml_data = (Get-Content -Raw .\\monkey-reports\\00000000-0000-0000-0000-000000000000\\clixml\\monkey3650000000000000000000000000000000020240902155926.clixml)\n</code></pre>"},{"location":"logging/File/","title":"File logger","text":"<p>The File plugin writes log events to a file. It supports which <code>eventType</code> can be written to a file.</p>"},{"location":"logging/File/#example","title":"Example","text":"<pre><code>\"logging\": {\n\"default\":[\n{\n\"name\": \"File\",\n\"type\": \"File\",\n\"configuration\": {\n\"filename\": \"monkey365_yyyyMMddhhmmss.log\",\n\"includeExceptions\": false,\n\"includeDebug\": false,\n\"includeVerbose\": false,\n\"includeError\": false\n}\n}\n],\n\"loggers\":[\n{\n\"name\": \"File\",\n\"type\": \"File\",\n\"configuration\": {\n\"filename\": \"monkey365_exceptions_yyyyMMddhhmmss.log\",\n\"includeExceptions\": true,\n\"includeDebug\": true,\n\"includeVerbose\": true,\n\"includeInfo\": false\n}\n}\n]\n}\n</code></pre>"},{"location":"logging/File/#configuration","title":"Configuration","text":"<ul> <li>name - Channel name</li> <li>type - File</li> <li>filename - The path of the file where logs will be written</li> <li>includeExceptions - whether or no exception streams will be written to file</li> <li>includeDebug - whether or no debug streams will be written to file</li> <li>includeVerbose - whether or no verbose streams will be written to file</li> <li>includeInfo - whether or no information streams will be written to file</li> </ul>"},{"location":"logging/Slack/","title":"Slack logger","text":"<p>The Slack plugin sends log events to a <code>slack</code> channel.</p>"},{"location":"logging/Slack/#example","title":"Example","text":"<pre><code>\"logging\": {\n\"default\":[\n{\n\"name\": \"File\",\n\"type\": \"File\",\n\"configuration\": {\n\"filename\": \"monkey365_yyyyMMddhhmmss.log\",\n\"includeExceptions\": false,\n\"includeDebug\": false,\n\"includeVerbose\": false,\n\"includeError\": false\n}\n}\n],\n\"loggers\":[\n{\n\"name\": \"Slack\",\n\"type\": \"Slack\",\n\"configuration\": {\n\"webHook\": \"https://hooks.slack.com/services/00000000000/00000000000/00000000000000000\",\n\"icon_emoji\": \":ghost:\",\n\"username\": \"monkey365\",\n\"channel\": \"#monkey365\",\n\"onlyExceptions\": true\n}\n}\n]\n}\n</code></pre>"},{"location":"logging/Slack/#configuration","title":"Configuration","text":"<ul> <li>name - Channel name</li> <li>type - Slack</li> <li>webHook - your Slack WebHook See the slack web api docs</li> <li>icon_emoji - the icon to use for the message</li> <li>username - the username to display with the message</li> <li>channel - the channel to send log messages</li> <li>onlyExceptions - Set to true in order to send only exceptions streams to Slack</li> </ul>"},{"location":"logging/Teams/","title":"Teams logger","text":"<p>The Teams plugin sends log events to a <code>Teams</code> channel.</p>"},{"location":"logging/Teams/#example","title":"Example","text":"<pre><code>\"logging\": {\n\"default\":[\n{\n\"name\": \"File\",\n\"type\": \"File\",\n\"configuration\": {\n\"filename\": \"monkey365_yyyyMMddhhmmss.log\",\n\"includeExceptions\": false,\n\"includeDebug\": false,\n\"includeVerbose\": false,\n\"includeError\": false\n}\n}\n],\n\"loggers\":[\n{\n\"name\": \"Teams\",\n\"type\": \"Teams\",\n\"configuration\": {\n\"webHook\": \"https://tenantName.webhook.office.com/webhookb2/00000000000/00000000000/00000000000000000\",\n\"onlyExceptions\": true\n}\n}\n]\n}\n</code></pre>"},{"location":"logging/Teams/#configuration","title":"Configuration","text":"<ul> <li>name - Channel name</li> <li>type - Teams</li> <li>webHook - your Teams WebHook See the Microsoft Teams docs</li> <li>onlyExceptions - Set to true in order to send only exceptions streams to Slack</li> </ul>"},{"location":"logging/channels/","title":"Channels","text":"<p>Channels serialise PowerShell log events to some form of output. Channels can be configured to write stream data to files, send emails, send data over the network, etc... For example:</p>"},{"location":"logging/channels/#example","title":"Example","text":"<pre><code>\"logging\": {\n\"default\":[\n{\n\"name\": \"File\",\n\"type\": \"File\",\n\"configuration\": {\n\"filename\": \"monkey365_yyyyMMddhhmmss.log\",\n\"includeExceptions\": false,\n\"includeDebug\": false,\n\"includeVerbose\": false,\n\"includeError\": false\n}\n}\n],\n\"loggers\":[\n{\n\"name\": \"File\",\n\"type\": \"File\",\n\"configuration\": {\n\"filename\": \"monkey365_exceptions_yyyyMMddhhmmss.log\",\n\"includeExceptions\": true,\n\"includeDebug\": true,\n\"includeVerbose\": true,\n\"includeInfo\": false\n}\n},\n{\n\"name\": \"Slack\",\n\"type\": \"Slack\",\n\"configuration\": {\n\"webHook\": \"https://hooks.slack.com/services/00000000000/00000000000/00000000000000000\",\n\"as_user\": \"false\",\n\"icon_emoji\": \":ghost:\",\n\"username\": \"monkey365\",\n\"channel\": \"#monkey365\",\n\"onlyExceptions\": true\n}\n}\n]\n}\n</code></pre> <p>In the above example, configuration file defines two channels named <code>File</code> and <code>Slack</code>.</p>"},{"location":"logging/introduction/","title":"Introduction","text":"<p>The internal logging module provides a multi-channel logger which is used internally. The logger module is inspired by the excellent project Powershell Logging Module. This section outlines how to configure it.</p> <p>The internal module intercepts the Write-Information, Write-Warning, Write-Verbose, Write-Debug and Write-Error cmdlets by using proxy functions to first send messages to custom channels before sending stream data to their original commands from the Microsoft.PowerShell.Utility module.</p> <p>The <code>MonkeyLogger</code> will send stream data to enabled channels, which needs to be configured prior using. Each of these listeners will receive each of the stream data and then will be sent to some form of output.</p> <p>The easiest way to configure <code>MonkeyLogger</code> is to have configured listeners in the <code>logging</code> section within the <code>monkey365/config/monkey_365.config</code> file. See below for a practical example.</p>"},{"location":"logging/introduction/#example","title":"Example","text":"<pre><code>\"logging\": {\n\"default\":[\n{\n\"name\": \"File\",\n\"type\": \"File\",\n\"configuration\": {\n\"filename\": \"monkey365_yyyyMMddhhmmss.log\",\n\"includeExceptions\": false,\n\"includeDebug\": false,\n\"includeVerbose\": false,\n\"includeError\": false\n}\n}\n]\n}\n</code></pre> <p>In the above example, configuration file defines one type named <code>File</code>.</p>"},{"location":"security_checks/custom-rule/","title":"Create a custom rule","text":""},{"location":"security_checks/custom-rule/#create-a-rule","title":"Create a rule","text":"<p>Monkey365 enable users to create rules, both simple and complex, to tell Monkey365 which objects to check, the conditions to check, and the corresponding actions to perform when conditions occur. You can use Monkey365 to create rules for internal data objects piped to Monkey365 for validation.</p>"},{"location":"security_checks/custom-rule/#rule-body","title":"Rule Body","text":"<p>A rule is described in JSON. A single rule can be used to represent complex rules. A rule has an <code>DisplayName</code> and a list of conditions that are evaluated when the rule is triggered.</p> <p></p>"},{"location":"security_checks/custom-rule/#scenario-check-for-remote-powershell-enabled-users","title":"Scenario - Check for remote PowerShell enabled users","text":"<p>In this quickstart scenario, we have been tasked with creating a rule to check for the presence of remote PowerShell enabled users in Exchange Online. When a user with the <code>RemotePowerShellEnabled</code> enabled attribute is found the rule should fail.</p> <p>To check the remote PowerShell access status for users, create a JSON rule with the following contents. This file can be created in any text editor, such as Notepad++ or Visual Studio Code. Please, note that you must save the new rule at <code>$monkey365_DIR/rules/findings</code> directory. </p> <pre><code>{\n\"serviceType\": \"Exchange Online\",\n\"serviceName\": \"Microsoft 365\",\n\"displayName\": \"Exchange Online Remote PowerShell Access Enabled\",\n\"description\": \"It was possible for users to access the Exchange Online Remote PowerShell on the Microsoft 365 environment.\",\n\"references\": [\n\"https://docs.microsoft.com/en-us/powershell/exchange/disable-access-to-exchange-online-powershell?view=exchange-ps\"\n],\n\"compliance\": [\n[\n\"Monkey365 rule\"\n]\n],\n\"path\": \"o365_exo_users\",\n\"conditions\":  [\n{\nstatements: [\n{\nconditions : [\n[\"RemotePowerShellEnabled\",\"ne\",\"False\"]\n]\n}\n]\n}\n],\n\"idsuffix\": \"o365_exo_users_remote_ps_enabled\"\n}\n</code></pre> <p>1.- <code>serviceType</code>: This is the friendly name of the application/service that is checked, displayed on the HTML dashboard.</p> <p>2.- <code>serviceName</code>: This is the friendly name of the provider, which is displayed on the HTML sidebar.</p> <p>3.- <code>displayName</code>: The rule name.</p> <p>4.- <code>description</code>: The rule description. Rule description supports Markdown. That way you can add links and apply minor text styles.</p> <p>5.- <code>references</code>: This parameter is optional. You can add external links in order to help consultants find more information about findings. Result output will sometimes be more than enough to explain what the issue is, but it can also be beneficial to explain why an issue exists, and this is a great place to do that. Additional elements such as remediation or rationale can be added to existing JSON rule. Both of them supports Markdown.</p> <p>6.- The <code>condition</code> property determines the checks Monkey365 will use to test each user returned in Exchange Online. Specifically, the <code>RemotePowerShellEnabled</code> property of each user object will be evaluated. The value of <code>RemotePowerShellEnabled</code> should not be False. Multiple PowerShell comparison operators are supported. The following link is a list of comparison operators supported by PowerShell. </p> <p>7.-  <code>idSuffix</code>: UniqueID for the rule.</p> <p>8.- Name your rule with a unique name .Json.</p>"},{"location":"security_checks/custom-rule/#testing-rules","title":"Testing rules","text":"<p>You can either create a new JSON ruleset from scratch or edit an existing one and add your custom rule. The following is an example of a custom ruleset with one rule. </p> <pre><code>{\n\"about\": \"My custom ruleset\",\n\"rules\": {\n\"exchange-users-remote-powershell-enabled.json\": [\n{\n\"enabled\": true,\n\"level\": \"medium\"\n}\n]\n}\n}\n</code></pre> <p>If users with remote PowerShell session are discovered, results will be displayed in the HTML report, as shown below:</p> <p></p> <p>You can customize HTML tables in order to visualize data in a variety of ways. More information about how to customize data can be found here.</p>"},{"location":"security_checks/custom-ruleset/","title":"Custom ruleset","text":""},{"location":"security_checks/custom-ruleset/#custom-rulesets","title":"Custom rulesets","text":"<p>Customizing existing rulesets for Azure or Microsoft 365 might be all you need at first, but at some point, you will want to make a custom ruleset. For example, the CIS Benchmark rulesets help check for recommended hardening policies and best practices, but you could create a custom ruleset to be used for analyzing an specific tenant or subscription. With this approach you can ignore specific rules you want and set the desired severity of these rules.</p> <p>You can either create a new JSON ruleset from scratch or edit an existing one. We recommend starting by editing an existing ruleset so that you have the base structure already in place. Later on, you can create a new ruleset from the beginning.</p>"},{"location":"security_checks/custom-ruleset/#adding-rules","title":"Adding rules","text":"<p>Add your own rules under the <code>rules</code> property in your JSON rule file. </p>"},{"location":"security_checks/custom-ruleset/#level","title":"level","text":"<p>The <code>level</code> keyword is optional and can be critical, high, medium, low, or info.</p> <p>If not set, the default value is info.</p>"},{"location":"security_checks/custom-ruleset/#disabling-rules","title":"Disabling Rules","text":"<p>There are situations in which you might want to enable all rules by default, and disable a few. The <code>enabled</code> keyword is mandatory and can be <code>true</code>, or <code>false</code>. </p>"},{"location":"security_checks/custom-ruleset/#extending-rules","title":"Extending Rules","text":"<p>In some cases you might want to apply a limited number of rules from another ruleset. To do this, use the <code>extends</code> property with the path of the ruleset. This will load rules from the extended ruleset. </p>"},{"location":"security_checks/custom-ruleset/#overrides","title":"Overrides","text":"<p>To customize the behavior of an specific rule, you can override the ruleset at deployment. When you override a rule you specify changes to be modified on top of the default ruleset. These changes will take precedence over the rule\u2019s default behavior.</p>"},{"location":"security_checks/custom-ruleset/#working-with-overrides","title":"Working with overrides","text":"<p>You can override a rule at various levels:</p> <ul> <li>args</li> <li>level</li> <li>enabled/disabled rule</li> <li>compliance</li> </ul> <p>For example overrides provide a way to replace the compliance value in your rule with another version.</p> <p></p> <p>Some of existing rules may require parameters, such as port, UUID, etc.. This rule definition can be referenced multiple times in the custom ruleset, and some of its values overridden by the ruleset. </p> <p></p>"},{"location":"security_checks/custom-ruleset/#run-monkey365-with-the-new-ruleset","title":"Run Monkey365 with the new ruleset","text":"<p>After you have finished creating the ruleset file, you will need to use the <code>RuleSet</code> parameter to load the ruleset, as shown below:</p> <p><pre><code>$param = @{\n    Instance = 'Microsoft365';\n    Collect = 'ExchangeOnline';\n    PromptBehavior = 'SelectAccount';\n    TenantID = '00000000-0000-0000-0000-000000000000';\n    RuleSet = C:\\temp\\myruleset.json;\n    ExportTo = 'HTML';\n}\nInvoke-Monkey365 @param\n</code></pre> You may want to use the previously created ruleset with saved projects. The following example shows how to use ImportJob and the RuleSet options:</p> <pre><code>$param = @{\n    ImportJob = $True;\n    RuleSet = C:\\temp\\myruleset.json;\n    ExportTo = 'HTML';\n}\nInvoke-Monkey365 @param\n</code></pre>"},{"location":"security_checks/overview/","title":"Overview","text":"<p>Monkey365 helps streamline the process of performing not only Microsoft 365, but also Azure subscriptions and Microsoft Entra ID Security Reviews.</p> <p>160+ checks covering industry defined security best practices for Microsoft 365, Azure and Microsoft Entra ID.</p> <p>All rulesets are located at <code>$monkey365_DIR/rules/ruleset</code> directory.</p> <p>Monkey365 will help consultants to assess cloud environment and to analyze the risk factors according to controls and best practices. The report will contain structured data for quick checking and verification of the results.</p>"},{"location":"security_checks/overview/#supported-standards","title":"Supported standards","text":"<p>By default, the HTML report shows you the CIS (Center for Internet Security) Benchmark. The CIS Benchmarks for Azure and Microsoft 365 are guidelines for security and compliance best practices.</p> <p>The following standards are supported by Monkey365:</p> <ul> <li>CIS Microsoft Azure Foundations Benchmark v2.0.0, v3.0.0</li> <li>CIS Microsoft 365 Foundations Benchmark v2.0.0, v3.0.0</li> </ul> <p>More standards will be added in next releases (NIST, HIPAA, GDPR, PCI-DSS, etc..) as they are available.</p>"},{"location":"security_checks/overview/#notes-about-security-controls","title":"Notes about security controls","text":"<p>For each standard, and depending on the environment, there is a list of applicable controls. Depending on the standard, some checks may be procedure, or process related best-practices, so this can't be verified by Monkey365. Some of them don't have any rule implemented yet, but will have in the future.</p>"}]}